// ===== –ó–ê–î–ê–ù–ò–ï 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤ —Å async/await =====

interface TaskResult {
  taskId: string;
  message: string;
  duration: number;
  timestamp: Date;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–∏—Å —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
 */
const createDelayedPromise = (
  delay: number,
  taskId: string
): Promise<TaskResult> => {
  return new Promise((resolve) => {
    const startTime = Date.now();
    setTimeout(() => {
      resolve({
        taskId,
        message: `–ó–∞–¥–∞—á–∞ ${taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
        duration: Date.now() - startTime,
        timestamp: new Date(),
      });
    }, delay);
  });
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–º–∏—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
const executePromisesSequentially = async (): Promise<TaskResult[]> => {
  console.log(
    "üöÄ –ó–∞–¥–∞–Ω–∏–µ 1: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–æ–≤...\n"
  );

  const results: TaskResult[] = [];
  const tasks = [
    { delay: 1000, id: "A" },
    { delay: 3000, id: "B" },
    { delay: 2000, id: "C" },
  ];

  for (const task of tasks) {
    console.log(`‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É ${task.id} (${task.delay}–º—Å)...`);
    const result = await createDelayedPromise(task.delay, task.id);
    console.log(`‚úÖ ${result.message} –∑–∞ ${result.duration}–º—Å`);
    results.push(result);
  }

  console.log("\nüìä –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ!\n");
  return results;
};

// ===== –ó–ê–î–ê–ù–ò–ï 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞—Å—Å–∏–≤–∞ =====

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Å —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
 */
const processStringAsync = (str: string, index: number): Promise<string> => {
  const delay = Math.random() * 1000 + 500; // 500-1500–º—Å

  return new Promise((resolve) => {
    setTimeout(() => {
      const result = str.toUpperCase();
      console.log(
        `  üìù –°—Ç—Ä–æ–∫–∞ "${str}" ‚Üí "${result}" (${Math.round(delay)}–º—Å)`
      );
      resolve(result);
    }, delay);
  });
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
 */
const processStringsInParallel = async (
  strings: string[]
): Promise<string[]> => {
  console.log("üöÄ –ó–∞–¥–∞–Ω–∏–µ 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫...");
  console.log(`üì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [${strings.join(", ")}]\n`);

  const startTime = Date.now();

  const promises = strings.map((str, index) => processStringAsync(str, index));
  const results = await Promise.all(promises);

  const totalTime = Date.now() - startTime;
  console.log(`\nüì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: [${results.join(", ")}]`);
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}–º—Å\n`);

  return results;
};

// ===== –ó–ê–î–ê–ù–ò–ï 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–∞—Ö =====

type PromiseResult<T> = {
  success: boolean;
  data?: T;
  error?: string;
  promiseId: string;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π
 */
const createTestPromise = (
  id: string,
  delay: number,
  shouldReject = false
): Promise<string> => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (shouldReject) {
        reject(new Error(`–ü—Ä–æ–º–∏—Å ${id} –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π`));
      } else {
        resolve(`–ü—Ä–æ–º–∏—Å ${id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      }
    }, delay);
  });
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–º–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
const handleParallelPromisesWithErrors = async (): Promise<void> => {
  console.log("üöÄ –ó–∞–¥–∞–Ω–∏–µ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–∞—Ö...\n");

  const promises = [
    createTestPromise("1", 1000, false),
    createTestPromise("2", 800, true), // –≠—Ç–æ—Ç –ø—Ä–æ–º–∏—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π
    createTestPromise("3", 1200, false),
  ];

  try {
    console.log("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏ –ø—Ä–æ–º–∏—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...");
    const results = await Promise.all(promises);
    console.log("‚úÖ –í—Å–µ –ø—Ä–æ–º–∏—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:", results);
  } catch (error) {
    console.log(
      "‚ùå –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞:",
      error instanceof Error ? error.message : error
    );
    console.log("üí° Promise.all –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ\n");
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å Promise.allSettled –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log(
    "üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.allSettled –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
  );
  const settledResults = await Promise.allSettled(promises);

  settledResults.forEach((result, index) => {
    if (result.status === "fulfilled") {
      console.log(`‚úÖ –ü—Ä–æ–º–∏—Å ${index + 1}: ${result.value}`);
    } else {
      console.log(`‚ùå –ü—Ä–æ–º–∏—Å ${index + 1}: ${result.reason.message}`);
    }
  });
  console.log();
};

// ===== –ó–ê–î–ê–ù–ò–ï 4: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è =====

interface DynamicTaskResult {
  originalDelay: number;
  actualDuration: number;
  message: string;
  index: number;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–∏—Å —Å —Ç–æ—á–Ω—ã–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
const createTimedPromise = (
  delay: number,
  index: number
): Promise<DynamicTaskResult> => {
  const startTime = Date.now();

  return new Promise((resolve) => {
    setTimeout(() => {
      const actualDuration = Date.now() - startTime;
      resolve({
        originalDelay: delay,
        actualDuration,
        message: `–ü—Ä–æ–º–∏—Å ${index + 1} –∑–∞–≤–µ—Ä—à–µ–Ω`,
        index,
      });
    }, delay);
  });
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–º–∏—Å—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
const executeDynamicTimingPromises = async (
  delays: number[]
): Promise<DynamicTaskResult[]> => {
  console.log("üöÄ –ó–∞–¥–∞–Ω–∏–µ 4: –ü—Ä–æ–º–∏—Å—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...");
  console.log(`üì• –ó–∞–¥–µ—Ä–∂–∫–∏: [${delays.join(", ")}] –º—Å\n`);

  const startTime = Date.now();
  console.log("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...");

  const promises = delays.map((delay, index) =>
    createTimedPromise(delay, index)
  );
  const results = await Promise.all(promises);

  const totalTime = Date.now() - startTime;
  const maxDelay = Math.max(...delays);

  console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:");
  results.forEach((result) => {
    console.log(
      `  ${result.message}: –æ–∂–∏–¥–∞–ª–æ—Å—å ${result.originalDelay}–º—Å, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${result.actualDuration}–º—Å`
    );
  });

  console.log(`\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}–º—Å`);
  console.log(`üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${maxDelay}–º—Å`);
  console.log(`üí° –†–∞–∑–Ω–∏—Ü–∞: ${totalTime - maxDelay}–º—Å (–Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)\n`);

  return results;
};

// ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –í–°–ï–• –ó–ê–î–ê–ù–ò–ô =====

const runAllTasks = async (): Promise<void> => {
  console.log("üéì –î–û–ú–ê–®–ù–Ø–Ø –†–ê–ë–û–¢–ê: TypeScript Async/Await\n");
  console.log("=".repeat(60) + "\n");

  try {
    // –ó–∞–¥–∞–Ω–∏–µ 1
    await executePromisesSequentially();

    console.log("=".repeat(60) + "\n");

    // –ó–∞–¥–∞–Ω–∏–µ 2
    const testStrings = [
      "typescript",
      "promises",
      "async",
      "await",
      "parallel",
    ];
    await processStringsInParallel(testStrings);

    console.log("=".repeat(60) + "\n");

    // –ó–∞–¥–∞–Ω–∏–µ 3
    await handleParallelPromisesWithErrors();

    console.log("=".repeat(60) + "\n");

    // –ó–∞–¥–∞–Ω–∏–µ 4
    const testDelays = [1000, 2000, 1500, 4000, 500];
    await executeDynamicTimingPromises(testDelays);

    console.log("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π:", error);
  }
};

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
runAllTasks();
